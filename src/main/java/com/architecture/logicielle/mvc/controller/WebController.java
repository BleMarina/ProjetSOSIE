package com.architecture.logicielle.mvc.controller;

import java.io.IOException;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import com.architecture.logicielle.mvc.data.UserView;
import com.architecture.logicielle.repository.UserRepository;
import com.architecture.logicielle.repository.entities.UserEntity;
import com.architecture.logicielle.service.UserService;
import com.architecture.logicielle.service.UserServiceImpl;

@Controller
public class WebController extends WebMvcConfigurerAdapter {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private UserService userService = new UserServiceImpl();

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/results").setViewName("results");
	}

	@GetMapping("/")
	public String showForm(Model model) {
		model.addAttribute("user", new UserView());
		return "form";
	}

	/*
	 * @PostMapping("/") public String checkPersonInfo(@Valid PersonForm personForm,
	 * BindingResult bindingResult) {
	 * 
	 * if (bindingResult.hasErrors()) { return "form"; }
	 * 
	 * return "redirect:/results"; }
	 */

	@PostMapping("/")
	public String InscriptionSubmit(Model model,@ModelAttribute @Valid UserView user, BindingResult bindingResult){
		model.addAttribute("user", user);
		
		if (bindingResult.hasErrors()) {
			return "form";
		} else {
			UserEntity userEnt = userService.parseUserViewToUserEntity(user);
			UserEntity userEntCheck = userService.checkUser(userEnt, userRepository);
			if(userEntCheck == null) {
				userService.saveUser(userEnt, userRepository);
			}else {
				return "form";
			}
			
			String name = user.getPhoto().getName();
			String path = user.getPhoto().getPath();
			System.out.println("name: " + name + " path: " + path);
			return "results";
		}
	}
	
	@GetMapping("/EditProfile")
	public String EditProfile(Model model) {
		UserEntity userEnt = userService.GetUserById(Long.valueOf(111), userRepository);
		UserView user = userService.parseUserEntityToUserView(userEnt);
		model.addAttribute("user", user);
		return "EditUser";
	}
	
	@PostMapping("/EditProfile/{userId}")
	public String EditProfileSubmit(@PathVariable Long userId, Model model,@ModelAttribute @Valid UserView user, BindingResult bindingResult) {
		UserEntity userEnt = userService.parseUserViewToUserEntity(user);
		userService.saveUser(userEnt, userRepository);
		model.addAttribute("user", new UserView());
		return "form";
	}
}
